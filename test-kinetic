#!/usr/bin/env python

from kinetic_ising import ising, Entropy,bitfield
import numpy as np

size=4
T=1000
y1=ising(size)
y1.random_wiring()
sample=y1.generate_sample(T)
#y1.observables_sample(sample)

m1=np.zeros(size)
D1=np.zeros((size,size))
s=bitfield(sample[0],size)*2-1
m1+=s/float(T)
for n in sample[1:]:
	sprev=s
	s=bitfield(n,size)*2-1
	m1+=s/float(T)
	for i in range(size):
		D1[:,i]+=s[i]*sprev/float(T-1)
		
for i in range(size):
	for j in range(size):
			D1[i,j]-=m1[i]*m1[j]
print(m1)
print(D1)


#exit(0)

error=1E-5

y=ising(size)
#y.P=y1.P.copy()

y.independent_model(m1)
fit=y.inverse(m1,D1,error,sample)
print(fit)
print(np.mean(np.sqrt(np.abs(y.h-y1.h)**2)),np.max(np.abs(y.h-y1.h)))
print(np.mean(np.sqrt(np.abs(y.J-y1.J)**2)),np.max(np.abs(y.J-y1.J)))
print()
print(y.h)
print(y1.h)

print()
print(y.J)
print(y1.J)
